ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
folders <- folders[-342] #remove the .txt
call_geo_location_all_EPCs <- T
source("./personal_setup.R")
#00_P1_dumpRmd.Rmd
geo_location_all_EPCs <- as.data.table(fst::read.fst("../Data/geo_location_all_EPCs.fst"))
library(data.table)
library(readr)
library(fasttime)
setwd('C:\\Users\\bonni\\Dropbox\\_PhD\\Application Documents\\CASA RA\\RA OS NARRATE CASA\\Code')
#get folders
folders <- list.files(path = "../Data/all-domestic-certificates", pattern = NULL, all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
folders <- folders[-342] #remove the .txt
folders <- as.data.frame(folders)
all_EPCs <- list()
print_counter = 0
start.time <- Sys.time()
for (LA in folders$folders) {
print_counter = print_counter+1
if(print_counter %% 20 == 0){
print(LA)
gc()}
#read subset only for speed:
readcols <- c("LMK_KEY","INSPECTION_DATE","UPRN","ADDRESS","POSTCODE",
"UPRN_SOURCE", "LOCAL_AUTHORITY","LOCAL_AUTHORITY_LABEL")
#read all as char, then parse for error catching
my_colClasses <- cbind.data.frame(readcols,  c( rep("character",length(readcols)) )  )
#read as data.tables
suppressWarnings(certificates <- fread(paste0("../Data/all-domestic-certificates/",LA,"/certificates.csv"),
select =  readcols,
colClasses=my_colClasses))
#convert to date.time
certificates[, INSPECTION_DATE := fastPOSIXct(INSPECTION_DATE, required.components = 3L)] #3 means only the date is required to a conversion to be valid
certificates[, folder_name := LA]
all_EPCs <- rbindlist(list(all_EPCs,certificates ))
rm(certificates)
}
print(paste('loop time:', Sys.time() - start.time))#
fst::write.fst(all_EPCs, "../Data/all_EPCs.fst")
all_EPCs[, n_UPRN := bit64::as.integer64.character(n_UPRN)]
geo_location_all_EPCs <- all_EPCs
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(readr)
library(readxl)
library(microbenchmark)
library(fasttime)
options(scipen=999)
call_all_EPCs <- T
#get folders
folders <- list.files(path = "../Data/all-domestic-certificates", pattern = NULL, all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
folders <- folders[-342] #remove the .txt
source("./personal_setup.R")
x_allcoverage <- geo_location_all_EPCs[ , .N, .(UPRN_SOURCE)]
x_allcoverage$percent <- round(x_allcoverage$N/sum(x_allcoverage$N), 3)
#UBDC LUT
start.time <- Sys.time()
ubdc_LUT <- as.data.table(fst::read.fst("../Data/ubdc_link.fst"))
print(paste('LUT import:', Sys.time() - start.time)) #approx 7 mins
setkey(ubdc_LUT,LMK_KEY)
##make a column based on the ubdc LUT
geo_location_all_EPCs[,ubdc_UPRN := ubdc_LUT[geo_location_all_EPCs$LMK_KEY, 'ubdc_uprn']]
###make col n_UPRN where this would UPRN,
geo_location_all_EPCs[ , n_UPRN := UPRN]
#or take ubdc_UPRN where its missing
# geo_location_all_EPCs[n_UPRN == '',.N,] #1M692 059
geo_location_all_EPCs[ n_UPRN == '',  n_UPRN := ubdc_UPRN]
geo_location_all_EPCs[ , n_UPRN := gsub("\\s+", "", n_UPRN, fixed = TRUE)] #safety check for any empty spaces
##tmp columns for identifying dups:
geo_location_all_EPCs[  is.na(n_UPRN), .N, ] # 710 333, no clue for the UPRN
geo_location_all_EPCs[,  str_concat := tolower(paste(ADDRESS, POSTCODE))]##combined str dups
#####################################
##Longitudinal Data Table
#####################################
#All Dups based on n_UPRN
setorder(geo_location_all_EPCs, n_UPRN, -INSPECTION_DATE)
geo_location_all_EPCs[ , tmp_n_UPRN_dup := ifelse(is.na(n_UPRN), F, duplicated(n_UPRN)|duplicated(n_UPRN, fromLast = T))]
#geo_location_all_EPCs[ tmp_n_UPRN_dup == T, .N] # n = 9M370 440
#length(unique(geo_location_all_EPCs[ tmp_n_UPRN_dup == T, n_UPRN] )) #N = 4M217 895
#All Dups based on address + postcode
setorder(geo_location_all_EPCs, str_concat, -INSPECTION_DATE)
geo_location_all_EPCs[ , tmp_str_dup := duplicated(str_concat)|duplicated(str_concat, fromLast = T)]
#geo_location_all_EPCs[ tmp_str_dup == T, .N] #7M927 424
#length(unique(geo_location_all_EPCs[ tmp_str_dup == T,str_concat])) #3M575 708
#####################################
duplicated_geo_location_all_EPCs <- geo_location_all_EPCs[tmp_n_UPRN_dup | tmp_str_dup,]
geo_location_all_EPCs[, tmp_UPRN_na := ifelse(UPRN == '', T, F)]
x_duplication_tally <- geo_location_all_EPCs[ , .N, by=.(tmp_n_UPRN_dup, tmp_str_dup, tmp_UPRN_na )]
x_duplication_tally$per <- round(x_duplication_tally$N/sum(x_duplication_tally$N), 2)*100
x_duplication_tally
geo_location_all_EPCs[ tmp_n_UPRN_dup == T, .N]
geo_location_all_EPCs[ tmp_str_dup == T, .N]
#Assigning UPRNs to duplicated entries based on dictionary
##CASE 1: identical string address repeats with UPRN value sometimes missing
##example: "domestic-E06000001-Hartlepool":'Mount Oswald Nursing Home, 16 Hutton Avenue TS26 9PN'
dict <- duplicated_geo_location_all_EPCs[ !is.na(n_UPRN)  , .(str_concat,n_UPRN,INSPECTION_DATE)]
length(dict)
lengths(dict[1])
lengths(dict)[1]
View(dict)
##CASE 1: identical string address repeats with UPRN value sometimes missing
##example: "domestic-E06000001-Hartlepool":'Mount Oswald Nursing Home, 16 Hutton Avenue TS26 9PN'
a <- duplicated_geo_location_all_EPCs[duplicated(str_concat) & is.na(n_UPRN),]
View(a)
crossSect_EPCs <- as.data.table(fst::read.fst( "../Data/crossSect_EPCs_N16m984352.fst"))
crossSect_EPCs <- as.data.table(fst::read.fst( "../Data/crossSect_EPCs_N16m984352.fst"))
##CASE 1: identical string address repeats with UPRN value sometimes missing
##example: "domestic-E06000001-Hartlepool":'Mount Oswald Nursing Home, 16 Hutton Avenue TS26 9PN'
a <- duplicated_geo_location_all_EPCs[duplicated(str_concat) & is.na(n_UPRN),]
crossSect_EPCs <- crossSect_EPCs[ is.na(n_UPRN)==T,]
rm(a, crossSect_EPCs )
#Assigning UPRNs to duplicated entries based on dictionary
dict <- duplicated_geo_location_all_EPCs[ !is.na(n_UPRN)  , .(str_concat,n_UPRN,INSPECTION_DATE)]
dict[, n_GRP:= ifelse(is.na(n_UPRN), str_concat, n_UPRN)]
View(dict)
dict[, n_GRP:= NULL]
a <- duplicated_geo_location_all_EPCs[!is.na(n_UPRN), n_GRP:= ifelse(is.na(n_UPRN), str_concat, n_UPRN)][, nUnique := uniqueN(LMK_KEY) ,by =n_GRP]
a <- dict[, nUnique := uniqueN(n_UPRN), by =str_concat]
a <- dict[, nUnique := length(unique(n_UPRN)), by =str_concat]
View(a)
names(duplicated_geo_location_all_EPCs)
invalid_UPRNs <- duplicated_geo_location_all_EPCs[!is.na(n_UPRN), .(str_concat,n_UPRN,UPRN,ubdc_UPRN,INSPECTION_DATE)][, nUnique := length(unique(n_UPRN)), by =str_concat]
View(invalid_UPRNs)
invalid_UPRNs <- [nUnique != 1, ]
invalid_UPRNs <- invalid_UPRNs[nUnique != 1, ]
View(invalid_UPRNs)
invalid_UPRNs[ , UPRN_clash:= ifelse(ubdc_UPRN == UPRN), F , T ]
invalid_UPRNs[ , UPRN_clash:= ifelse(ubdc_UPRN == UPRN), F , T), ]
invalid_UPRNs[ , UPRN_clash:= ifelse(ubdc_UPRN == UPRN, F , T), ]
View(invalid_UPRNs)
##CASE 2: identical string address repeats with different UPRN values
##example: "domestic-E06000001-Hartlepool":"Gospel Hall, 32 Town Wall TS24 0JQ"
##resolution: assume the most recent UPRN to be the right one #possible extension here for string comparison with OS
# invalid_UPRNs <- duplicated_geo_location_all_EPCs[!is.na(n_UPRN), .(str_concat,n_UPRN,UPRN,ubdc_UPRN,INSPECTION_DATE)]
# invalid_UPRNs <- invalid_UPRNs[, nUnique := length(unique(n_UPRN)), by =str_concat][nUnique != 1, ]
# invalid_UPRNs[ , UPRN_clash:= ifelse(ubdc_UPRN == UPRN, F , T), ]
#
write.fst(invalid_UPRNs, "../Data/appendix_invalid_UPRNs.fst")
library(fasttime)
##CASE 2: identical string address repeats with different UPRN values
##example: "domestic-E06000001-Hartlepool":"Gospel Hall, 32 Town Wall TS24 0JQ"
##resolution: assume the most recent UPRN to be the right one #possible extension here for string comparison with OS
# invalid_UPRNs <- duplicated_geo_location_all_EPCs[!is.na(n_UPRN), .(str_concat,n_UPRN,UPRN,ubdc_UPRN,INSPECTION_DATE)]
# invalid_UPRNs <- invalid_UPRNs[, nUnique := length(unique(n_UPRN)), by =str_concat][nUnique != 1, ]
# invalid_UPRNs[ , UPRN_clash:= ifelse(ubdc_UPRN == UPRN, F , T), ]
#
write.fst(invalid_UPRNs, "../Data/appendix_invalid_UPRNs.fst")
library(fasttime)
write.fst(invalid_UPRNs, "../Data/appendix_invalid_UPRNs.fst")
##CASE 2: identical string address repeats with different UPRN values
##example: "domestic-E06000001-Hartlepool":"Gospel Hall, 32 Town Wall TS24 0JQ"
##resolution: assume the most recent UPRN to be the right one #possible extension here for string comparison with OS
# invalid_UPRNs <- duplicated_geo_location_all_EPCs[!is.na(n_UPRN), .(str_concat,n_UPRN,UPRN,ubdc_UPRN,INSPECTION_DATE)]
# invalid_UPRNs <- invalid_UPRNs[, nUnique := length(unique(n_UPRN)), by =str_concat][nUnique != 1, ]
# invalid_UPRNs[ , UPRN_clash:= ifelse(ubdc_UPRN == UPRN, F , T), ]
#
fst::write.fst(invalid_UPRNs, "../Data/appendix_invalid_UPRNs.fst")
##CASE 2: identical string address repeats with different UPRN values
##example: "domestic-E06000001-Hartlepool":"Gospel Hall, 32 Town Wall TS24 0JQ"
##resolution: assume the most recent UPRN to be the right one #possible extension here for string comparison with OS
# invalid_UPRNs <- duplicated_geo_location_all_EPCs[!is.na(n_UPRN), .(str_concat,n_UPRN,UPRN,ubdc_UPRN,INSPECTION_DATE)]
# invalid_UPRNs <- invalid_UPRNs[, nUnique := length(unique(n_UPRN)), by =str_concat][nUnique != 1, ]
# invalid_UPRNs[ , UPRN_clash:= ifelse(ubdc_UPRN == UPRN, F , T), ]
# fst::write.fst(invalid_UPRNs, "../Data/appendix_invalid_UPRNs.fst")
write.csv(invalid_UPRNs, '../_Report/appendix_invalid_UPRNs.csv')
##CASE 1: identical string address repeats with UPRN value sometimes missing
##example: "domestic-E06000001-Hartlepool":'Mount Oswald Nursing Home, 16 Hutton Avenue TS26 9PN'
appearing_UPRNs <- duplicated_geo_location_all_EPCs[duplicated(str_concat), .(str_concat,n_UPRN,INSPECTION_DATE)]
appearing_UPRNs[, missing_UPRN := is.na(n_UPRN), by = str_concat]
View(appearing_UPRNs)
##CASE 1: identical string address repeats with UPRN value sometimes missing
##example: "domestic-E06000001-Hartlepool":'Mount Oswald Nursing Home, 16 Hutton Avenue TS26 9PN'
appearing_UPRNs <- duplicated_geo_location_all_EPCs[tmp_str_dup, .(str_concat,n_UPRN,INSPECTION_DATE)]
##CASE 1: identical string address repeats with UPRN value sometimes missing
##example: "domestic-E06000001-Hartlepool":'Mount Oswald Nursing Home, 16 Hutton Avenue TS26 9PN'
rm(appearing_UPRNs)
appearing_UPRNs <- duplicated_geo_location_all_EPCs[tmp_str_dup == T, .(str_concat,n_UPRN,INSPECTION_DATE)]
appearing_UPRNs <- duplicated_geo_location_all_EPCs[tmp_str_dup == T, .(str_concat,n_UPRN,INSPECTION_DATE)]
View(appearing_UPRNs)
appearing_UPRNs[, missing_UPRN := is.na(n_UPRN), by = str_concat]
View(appearing_UPRNs)
sum(is.na(c(NA,NA)))
appearing_UPRNs[, same_UPRN_v := (length(sum(is.na(c(n_UPRN)))) == length(n_UPRN)), by = str_concat]
View(appearing_UPRNs)
appearing_UPRNs[, missing_UPRN := NULL]
appearing_UPRNs[, missing_UPRN := ifelse(length(sum(is.na(c(n_UPRN)))) == length(unique(n_UPRN)), T, F), by = str_concat]
appearing_UPRNs[, missing_UPRN := ifelse(length(sum(is.na(c(n_UPRN)))) == length(str_concat), T, F), by = str_concat]
View(appearing_UPRNs)
appearing_UPRNs[349,]
appearing_UPRNs[6, n_UPRN := NA,]
View(appearing_UPRNs)
appearing_UPRNs[, missing_UPRN := ifelse(length(sum(is.na(c(n_UPRN)))) != length(str_concat), T, F), by = str_concat]
View(appearing_UPRNs)
appearing_UPRNs[, missing_UPRN := ifelse(sum(is.na(c(n_UPRN))) != length(str_concat), T, F), by = str_concat]
appearing_UPRNs[, missing_UPRN := ifelse(sum(is.na(n_UPRN)) != length(str_concat), T, F), by = str_concat]
View(appearing_UPRNs)
appearing_UPRNs[, appearing_UPRN := ifelse(sum(is.na(n_UPRN)) == length(str_concat), F, T), by = str_concat]
View(appearing_UPRNs)
appearing_UPRNs[, appearing_UPRN := ifelse(sum(is.na(n_UPRN)) == length(str_concat), T, F), by = str_concat]
View(appearing_UPRNs)
length(unique(appearing_UPRNs[appearing_UPRN==T,]$str_concat))
View(invalid_UPRNs)
invalid_UPRNs[ !is.na(ubdc_UPRN), DLUHC_priority := ifelse( UPRN != ubdc_UPRN, T, F), ]
View(invalid_UPRNs)
sum(invalid_UPRNs$DLUHC_priority)
sum(invalid_UPRNs$DLUHC_priority == T)
sum(invalid_UPRNs$DLUHC_priority ==T)
sum(invalid_UPRNs$DLUHC_priority == T,na.rm = T)
##CASE 2: identical string address repeats with different UPRN values
##example: "domestic-E06000001-Hartlepool":"Gospel Hall, 32 Town Wall TS24 0JQ"
##resolution: assume the most recent UPRN to be the right one #possible extension here for string comparison with OS
# invalid_UPRNs <- duplicated_geo_location_all_EPCs[!is.na(n_UPRN), .(str_concat,n_UPRN,UPRN,ubdc_UPRN,INSPECTION_DATE)]
# invalid_UPRNs <- invalid_UPRNs[, nUnique := length(unique(n_UPRN)), by = str_concat][nUnique != 1, ]
# invalid_UPRNs[ , UPRN_clash:= ifelse(ubdc_UPRN == UPRN, F , T), ]
# fst::write.fst(invalid_UPRNs, "../Data/appendix_invalid_UPRNs.fst")
# write.csv(invalid_UPRNs, '../_Report/appendix_invalid_UPRNs.csv')
invalid_UPRNs[ !is.na(ubdc_UPRN), DLUHC_priority := ifelse( UPRN != ubdc_UPRN, T, NA), ]
sum(invalid_UPRNs$DLUHC_priority ==T)
##CASE 2: identical string address repeats with different UPRN values
##example: "domestic-E06000001-Hartlepool":"Gospel Hall, 32 Town Wall TS24 0JQ"
##resolution: assume the most recent UPRN to be the right one #possible extension here for string comparison with OS
# invalid_UPRNs <- duplicated_geo_location_all_EPCs[!is.na(n_UPRN), .(str_concat,n_UPRN,UPRN,ubdc_UPRN,INSPECTION_DATE)]
# invalid_UPRNs <- invalid_UPRNs[, nUnique := length(unique(n_UPRN)), by = str_concat][nUnique != 1, ]
# invalid_UPRNs[ , UPRN_clash:= ifelse(ubdc_UPRN == UPRN, F , T), ]
# fst::write.fst(invalid_UPRNs, "../Data/appendix_invalid_UPRNs.fst")
# write.csv(invalid_UPRNs, '../_Report/appendix_invalid_UPRNs.csv')
invalid_UPRNs[ !is.na(ubdc_UPRN), DLUHC_priority := ifelse( UPRN != ubdc_UPRN, 1, NA), ]
sum(invalid_UPRNs$DLUHC_priority ==T)
View(invalid_UPRNs)
##CASE 2: identical string address repeats with different UPRN values
##example: "domestic-E06000001-Hartlepool":"Gospel Hall, 32 Town Wall TS24 0JQ"
##resolution: assume the most recent UPRN to be the right one #possible extension here for string comparison with OS
# invalid_UPRNs <- duplicated_geo_location_all_EPCs[!is.na(n_UPRN), .(str_concat,n_UPRN,UPRN,ubdc_UPRN,INSPECTION_DATE)]
# invalid_UPRNs <- invalid_UPRNs[, nUnique := length(unique(n_UPRN)), by = str_concat][nUnique != 1, ]
# invalid_UPRNs[ , UPRN_clash:= ifelse(ubdc_UPRN == UPRN, F , T), ]
# fst::write.fst(invalid_UPRNs, "../Data/appendix_invalid_UPRNs.fst")
# write.csv(invalid_UPRNs, '../_Report/appendix_invalid_UPRNs.csv')
invalid_UPRNs[ !is.na(ubdc_UPRN), DLUHC_priority := ifelse( UPRN != ubdc_UPRN, 1, NA), ]
View(invalid_UPRNs)
invalid_UPRNs[ , DLUHC_priority := NULL, ]
View(invalid_UPRNs)
##CASE 2: identical string address repeats with different UPRN values
##example: "domestic-E06000001-Hartlepool":"Gospel Hall, 32 Town Wall TS24 0JQ"
##resolution: assume the most recent UPRN to be the right one #possible extension here for string comparison with OS
# invalid_UPRNs <- duplicated_geo_location_all_EPCs[!is.na(n_UPRN), .(str_concat,n_UPRN,UPRN,ubdc_UPRN,INSPECTION_DATE)]
# invalid_UPRNs <- invalid_UPRNs[, nUnique := length(unique(n_UPRN)), by = str_concat][nUnique != 1, ]
# invalid_UPRNs[ , UPRN_clash:= ifelse(ubdc_UPRN == UPRN, F , T), ]
# fst::write.fst(invalid_UPRNs, "../Data/appendix_invalid_UPRNs.fst")
# write.csv(invalid_UPRNs, '../_Report/appendix_invalid_UPRNs.csv')
invalid_UPRNs[ !is.na(ubdc_UPRN), DLUHC_priority := ifelse( UPRN != ubdc_UPRN, 1, NA), ]
length(invalid_UPRNs$n_UPRN[DLUHC_priority == T,])
length(invalid_UPRNs[DLUHC_priority == T,]$n_UPRN)
length(unique(invalid_UPRNs[DLUHC_priority == T,]$n_UPRN))
View(invalid_UPRNs[DLUHC_priority == T,])
##CASE 2: identical string address repeats with different UPRN values
##example: "domestic-E06000001-Hartlepool":"Gospel Hall, 32 Town Wall TS24 0JQ"
##resolution: assume the most recent UPRN to be the right one #possible extension here for string comparison with OS
# invalid_UPRNs <- duplicated_geo_location_all_EPCs[!is.na(n_UPRN), .(str_concat,n_UPRN,UPRN,ubdc_UPRN,INSPECTION_DATE)]
# invalid_UPRNs <- invalid_UPRNs[, nUnique := length(unique(n_UPRN)), by = str_concat][nUnique != 1, ]
# invalid_UPRNs[ , UPRN_clash:= ifelse(ubdc_UPRN == UPRN, F , T), ]
# fst::write.fst(invalid_UPRNs, "../Data/appendix_invalid_UPRNs.fst")
# write.csv(invalid_UPRNs, '../_Report/appendix_invalid_UPRNs.csv')
invalid_UPRNs[ !is.na(ubdc_UPRN) & !is.na(UPRN), DLUHC_priority := ifelse( UPRN != ubdc_UPRN, T, NA), ]
length(invalid_UPRNs[DLUHC_priority == T,]$n_UPRN)#
length(unique(invalid_UPRNs[DLUHC_priority == T,]$n_UPRN))#1 259
View(invalid_UPRNs[DLUHC_priority == T,])
##CASE 2: identical string address repeats with different UPRN values
##example: "domestic-E06000001-Hartlepool":"Gospel Hall, 32 Town Wall TS24 0JQ"
##resolution: assume the most recent UPRN to be the right one #possible extension here for string comparison with OS
# invalid_UPRNs <- duplicated_geo_location_all_EPCs[!is.na(n_UPRN), .(str_concat,n_UPRN,UPRN,ubdc_UPRN,INSPECTION_DATE)]
# invalid_UPRNs <- invalid_UPRNs[, nUnique := length(unique(n_UPRN)), by = str_concat][nUnique != 1, ]
# invalid_UPRNs[ , UPRN_clash:= ifelse(ubdc_UPRN == UPRN, F , T), ]
# fst::write.fst(invalid_UPRNs, "../Data/appendix_invalid_UPRNs.fst")
# write.csv(invalid_UPRNs, '../_Report/appendix_invalid_UPRNs.csv')
invalid_UPRNs[ !is.na(ubdc_UPRN) | !is.na(UPRN), DLUHC_priority := ifelse( UPRN != ubdc_UPRN, T, NA), ]
length(invalid_UPRNs[DLUHC_priority == T,]$n_UPRN)#1 382
length(unique(invalid_UPRNs[DLUHC_priority == T,]$n_UPRN))#1 259
View(invalid_UPRNs[DLUHC_priority == T,])
##CASE 2: identical string address repeats with different UPRN values
##example: "domestic-E06000001-Hartlepool":"Gospel Hall, 32 Town Wall TS24 0JQ"
##resolution: assume the most recent UPRN to be the right one #possible extension here for string comparison with OS
# invalid_UPRNs <- duplicated_geo_location_all_EPCs[!is.na(n_UPRN), .(str_concat,n_UPRN,UPRN,ubdc_UPRN,INSPECTION_DATE)]
# invalid_UPRNs <- invalid_UPRNs[, nUnique := length(unique(n_UPRN)), by = str_concat][nUnique != 1, ]
# invalid_UPRNs[ , UPRN_clash:= ifelse(ubdc_UPRN == UPRN, F , T), ]
# fst::write.fst(invalid_UPRNs, "../Data/appendix_invalid_UPRNs.fst")
# write.csv(invalid_UPRNs, '../_Report/appendix_invalid_UPRNs.csv')
invalid_UPRNs[!is.na(ubdc_UPRN),][!is.na(UPRN), DLUHC_priority := ifelse( UPRN != ubdc_UPRN, T, NA), ]
length(invalid_UPRNs[DLUHC_priority == T,]$n_UPRN)#1 382
length(unique(invalid_UPRNs[DLUHC_priority == T,]$n_UPRN))#1 259
View(invalid_UPRNs[DLUHC_priority == T,])
View(invalid_UPRNs)
View(appearing_UPRNs)
View(invalid_UPRNs[DLUHC_priority == T & !is.na(UPRN),])
##CASE 2: identical string address repeats with different UPRN values
##example: "domestic-E06000001-Hartlepool":"Gospel Hall, 32 Town Wall TS24 0JQ"
##resolution: assume the most recent UPRN to be the right one #possible extension here for string comparison with OS
# invalid_UPRNs <- duplicated_geo_location_all_EPCs[!is.na(n_UPRN), .(str_concat,n_UPRN,UPRN,ubdc_UPRN,INSPECTION_DATE)]
# invalid_UPRNs <- invalid_UPRNs[, nUnique := length(unique(n_UPRN)), by = str_concat][nUnique != 1, ]
# invalid_UPRNs[ , UPRN_clash:= ifelse(ubdc_UPRN == UPRN, F , T), ]
# fst::write.fst(invalid_UPRNs, "../Data/appendix_invalid_UPRNs.fst")
# write.csv(invalid_UPRNs, '../_Report/appendix_invalid_UPRNs.csv')
invalid_UPRNs[!is.na(ubdc_UPRN),][UPRN =='', DLUHC_priority := ifelse( UPRN != ubdc_UPRN, T, NA), ]
length(invalid_UPRNs[DLUHC_priority == T,]$n_UPRN)#1 382
length(unique(invalid_UPRNs[DLUHC_priority == T,]$n_UPRN))#1 259
View(invalid_UPRNs[DLUHC_priority == T,])
invalid_UPRNs[1]
invalid_UPRNs[1]$UPRN
##CASE 2: identical string address repeats with different UPRN values
##example: "domestic-E06000001-Hartlepool":"Gospel Hall, 32 Town Wall TS24 0JQ"
##resolution: assume the most recent UPRN to be the right one #possible extension here for string comparison with OS
# invalid_UPRNs <- duplicated_geo_location_all_EPCs[!is.na(n_UPRN), .(str_concat,n_UPRN,UPRN,ubdc_UPRN,INSPECTION_DATE)]
# invalid_UPRNs <- invalid_UPRNs[, nUnique := length(unique(n_UPRN)), by = str_concat][nUnique != 1, ]
# invalid_UPRNs[ , UPRN_clash:= ifelse(ubdc_UPRN == UPRN, F , T), ]
# fst::write.fst(invalid_UPRNs, "../Data/appendix_invalid_UPRNs.fst")
# write.csv(invalid_UPRNs, '../_Report/appendix_invalid_UPRNs.csv')
invalid_UPRNs[!is.na(ubdc_UPRN),][UPRN =="", DLUHC_priority := ifelse( UPRN != ubdc_UPRN, T, NA), ]
length(invalid_UPRNs[DLUHC_priority == T,]$n_UPRN)#1 382
length(unique(invalid_UPRNs[DLUHC_priority == T,]$n_UPRN))#1 259
View(invalid_UPRNs[DLUHC_priority == T,])
##CASE 2: identical string address repeats with different UPRN values
##example: "domestic-E06000001-Hartlepool":"Gospel Hall, 32 Town Wall TS24 0JQ"
##resolution: assume the most recent UPRN to be the right one #possible extension here for string comparison with OS
# invalid_UPRNs <- duplicated_geo_location_all_EPCs[!is.na(n_UPRN), .(str_concat,n_UPRN,UPRN,ubdc_UPRN,INSPECTION_DATE)]
# invalid_UPRNs <- invalid_UPRNs[, nUnique := length(unique(n_UPRN)), by = str_concat][nUnique != 1, ]
# invalid_UPRNs[ , UPRN_clash:= ifelse(ubdc_UPRN == UPRN, F , T), ]
# fst::write.fst(invalid_UPRNs, "../Data/appendix_invalid_UPRNs.fst")
# write.csv(invalid_UPRNs, '../_Report/appendix_invalid_UPRNs.csv')
invalid_UPRNs[!is.na(ubdc_UPRN),][, DLUHC_priority := ifelse( UPRN != ubdc_UPRN, T, NA), ]
length(invalid_UPRNs[DLUHC_priority == T,]$n_UPRN)#1 382
length(unique(invalid_UPRNs[DLUHC_priority == T,]$n_UPRN))#1 259
View(invalid_UPRNs[DLUHC_priority == T,])
invalid_UPRNs[!is.na(ubdc_UPRN),][!is.na(UPRN), DLUHC_priority := ifelse( UPRN != ubdc_UPRN, T, NA), ]
length(invalid_UPRNs[DLUHC_priority == T,]$n_UPRN)#1 382
length(unique(invalid_UPRNs[DLUHC_priority == T,]$n_UPRN))#1 259
invalid_UPRNs[1]$UPRN == ""
invalid_UPRNs[1]$UPRN == " "
##CASE 2: identical string address repeats with different UPRN values
##example: "domestic-E06000001-Hartlepool":"Gospel Hall, 32 Town Wall TS24 0JQ"
##resolution: assume the most recent UPRN to be the right one #possible extension here for string comparison with OS
# invalid_UPRNs <- duplicated_geo_location_all_EPCs[!is.na(n_UPRN), .(str_concat,n_UPRN,UPRN,ubdc_UPRN,INSPECTION_DATE)]
# invalid_UPRNs <- invalid_UPRNs[, nUnique := length(unique(n_UPRN)), by = str_concat][nUnique != 1, ]
# invalid_UPRNs[ , UPRN_clash:= ifelse(ubdc_UPRN == UPRN, F , T), ]
# fst::write.fst(invalid_UPRNs, "../Data/appendix_invalid_UPRNs.fst")
# write.csv(invalid_UPRNs, '../_Report/appendix_invalid_UPRNs.csv')
invalid_UPRNs[!is.na(ubdc_UPRN),][!is.na(UPRN) | invalid_UPRNs[1]$UPRN != "", DLUHC_priority := ifelse( UPRN != ubdc_UPRN, T, NA), ]
length(invalid_UPRNs[DLUHC_priority == T,]$n_UPRN)#1 382
length(unique(invalid_UPRNs[DLUHC_priority == T,]$n_UPRN))#1 259
View(invalid_UPRNs[DLUHC_priority == T & invalid_UPRNs[1]$UPRN != "",])
View(invalid_UPRNs[DLUHC_priority == T,])
View(invalid_UPRNs[invalid_UPRNs[1]$UPRN == ""][DLUHC_priority == T,])
View(invalid_UPRNs[invalid_UPRNs[1]$UPRN != "",][DLUHC_priority == T,])
invalid_UPRNs[1]$UPRN != ""
View(invalid_UPRNs[!invalid_UPRNs[1]$UPRN == "",][DLUHC_priority == T,])
##CASE 2: identical string address repeats with different UPRN values
##example: "domestic-E06000001-Hartlepool":"Gospel Hall, 32 Town Wall TS24 0JQ"
##resolution: assume the most recent UPRN to be the right one #possible extension here for string comparison with OS
# invalid_UPRNs <- duplicated_geo_location_all_EPCs[!is.na(n_UPRN), .(str_concat,n_UPRN,UPRN,ubdc_UPRN,INSPECTION_DATE)]
# invalid_UPRNs <- invalid_UPRNs[, nUnique := length(unique(n_UPRN)), by = str_concat][nUnique != 1, ]
# invalid_UPRNs[ , UPRN_clash:= ifelse(ubdc_UPRN == UPRN, F , T), ]
# fst::write.fst(invalid_UPRNs, "../Data/appendix_invalid_UPRNs.fst")
# write.csv(invalid_UPRNs, '../_Report/appendix_invalid_UPRNs.csv')
invalid_UPRNs[!is.na(ubdc_UPRN),][!is.na(UPRN) | !invalid_UPRNs[1]$UPRN == "", DLUHC_priority := ifelse( UPRN != ubdc_UPRN, T, NA), ]
length(invalid_UPRNs[DLUHC_priority == T,]$n_UPRN)#1 382
length(unique(invalid_UPRNs[DLUHC_priority == T,]$n_UPRN))#1 259
View(invalid_UPRNs[!invalid_UPRNs[1]$UPRN == "",][DLUHC_priority == T,])
View(invalid_UPRNs)
##CASE 2: identical string address repeats with different UPRN values
##example: "domestic-E06000001-Hartlepool":"Gospel Hall, 32 Town Wall TS24 0JQ"
##resolution: assume the most recent UPRN to be the right one #possible extension here for string comparison with OS
# invalid_UPRNs <- duplicated_geo_location_all_EPCs[!is.na(n_UPRN), .(str_concat,n_UPRN,UPRN,ubdc_UPRN,INSPECTION_DATE)]
# invalid_UPRNs <- invalid_UPRNs[, nUnique := length(unique(n_UPRN)), by = str_concat][nUnique != 1, ]
# invalid_UPRNs[ , UPRN_clash:= ifelse(ubdc_UPRN == UPRN, F , T), ]
# fst::write.fst(invalid_UPRNs, "../Data/appendix_invalid_UPRNs.fst")
# write.csv(invalid_UPRNs, '../_Report/appendix_invalid_UPRNs.csv')
invalid_UPRNs[!is.na(ubdc_UPRN),][!is.na(UPRN) | !UPRN == "", DLUHC_priority := ifelse( UPRN != ubdc_UPRN, T, NA), ]
length(invalid_UPRNs[DLUHC_priority == T,]$n_UPRN)#1 382
length(unique(invalid_UPRNs[DLUHC_priority == T,]$n_UPRN))#1 259
View(invalid_UPRNs[!UPRN == "",][DLUHC_priority == T,])
##CASE 2: identical string address repeats with different UPRN values
##example: "domestic-E06000001-Hartlepool":"Gospel Hall, 32 Town Wall TS24 0JQ"
##resolution: assume the most recent UPRN to be the right one #possible extension here for string comparison with OS
# invalid_UPRNs <- duplicated_geo_location_all_EPCs[!is.na(n_UPRN), .(str_concat,n_UPRN,UPRN,ubdc_UPRN,INSPECTION_DATE)]
# invalid_UPRNs <- invalid_UPRNs[, nUnique := length(unique(n_UPRN)), by = str_concat][nUnique != 1, ]
# invalid_UPRNs[ , UPRN_clash:= ifelse(ubdc_UPRN == UPRN, F , T), ]
# fst::write.fst(invalid_UPRNs, "../Data/appendix_invalid_UPRNs.fst")
# write.csv(invalid_UPRNs, '../_Report/appendix_invalid_UPRNs.csv')
invalid_UPRNs[!is.na(ubdc_UPRN),][!is.na(UPRN) | !UPRN == "", DLUHC_priority := ifelse( UPRN != ubdc_UPRN, T, NA), ]
length(invalid_UPRNs[DLUHC_priority == T,]$n_UPRN)#1 382
View(invalid_UPRNs)
View(invalid_UPRNs[!UPRN == "",][DLUHC_priority == T,])
length(invalid_UPRNs[!UPRN == "",][DLUHC_priority == T,])
length(invalid_UPRNs[!UPRN == "",][DLUHC_priority == T,])
View(invalid_UPRNs[!UPRN == "",][DLUHC_priority == T,])
lengths(invalid_UPRNs[!UPRN == "",][DLUHC_priority == T,][1])
lengths(invalid_UPRNs[!UPRN == "",][DLUHC_priority == T,])
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(readr)
library(readxl)
library(microbenchmark)
library(fasttime)
options(scipen=999)
call_all_EPCs <- T
#get folders
folders <- list.files(path = "../Data/all-domestic-certificates", pattern = NULL, all.files = FALSE,
full.names = FALSE, recursive = FALSE,
ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)
folders <- folders[-342] #remove the .txt
source("./personal_setup.R")
x_allcoverage <- geo_location_all_EPCs[ , .N, .(UPRN_SOURCE)]
x_allcoverage$percent <- round(x_allcoverage$N/sum(x_allcoverage$N), 3)
#UBDC LUT
start.time <- Sys.time()
ubdc_LUT <- as.data.table(fst::read.fst("../Data/ubdc_link.fst"))
print(paste('LUT import:', Sys.time() - start.time)) #approx 7 mins
setkey(ubdc_LUT,LMK_KEY)
##make a column based on the ubdc LUT
geo_location_all_EPCs[,ubdc_UPRN := ubdc_LUT[geo_location_all_EPCs$LMK_KEY, 'ubdc_uprn']]
###make col n_UPRN where this would UPRN,
geo_location_all_EPCs[ , n_UPRN := UPRN]
#or take ubdc_UPRN where its missing
# geo_location_all_EPCs[n_UPRN == '',.N,] #1M692 059
geo_location_all_EPCs[ n_UPRN == '',  n_UPRN := ubdc_UPRN]
geo_location_all_EPCs[ , n_UPRN := gsub("\\s+", "", n_UPRN, fixed = TRUE)] #safety check for any empty spaces
##tmp columns for identifying dups:
geo_location_all_EPCs[  is.na(n_UPRN), .N, ] # 710 333, no clue for the UPRN
geo_location_all_EPCs[,  str_concat := tolower(paste(ADDRESS, POSTCODE))]##combined str dups
#####################################
##Longitudinal Data Table
#####################################
#All Dups based on n_UPRN
setorder(geo_location_all_EPCs, n_UPRN, -INSPECTION_DATE)
geo_location_all_EPCs[ , tmp_n_UPRN_dup := ifelse(is.na(n_UPRN), F, duplicated(n_UPRN)|duplicated(n_UPRN, fromLast = T))]
#geo_location_all_EPCs[ tmp_n_UPRN_dup == T, .N] # n = 9M370 440
#length(unique(geo_location_all_EPCs[ tmp_n_UPRN_dup == T, n_UPRN] )) #N = 4M217 895
#All Dups based on address + postcode
setorder(geo_location_all_EPCs, str_concat, -INSPECTION_DATE)
geo_location_all_EPCs[ , tmp_str_dup := duplicated(str_concat)|duplicated(str_concat, fromLast = T)]
#geo_location_all_EPCs[ tmp_str_dup == T, .N] #7M927 424
#length(unique(geo_location_all_EPCs[ tmp_str_dup == T,str_concat])) #3M575 708
#####################################
duplicated_geo_location_all_EPCs <- geo_location_all_EPCs[tmp_n_UPRN_dup | tmp_str_dup,]
geo_location_all_EPCs[, tmp_UPRN_na := ifelse(UPRN == '', T, F)]
x_duplication_tally <- geo_location_all_EPCs[ , .N, by=.(tmp_n_UPRN_dup, tmp_str_dup, tmp_UPRN_na )]
x_duplication_tally$per <- round(x_duplication_tally$N/sum(x_duplication_tally$N), 2)*100
x_duplication_tally
##CASE 1: identical string address repeats with UPRN value sometimes missing
##example: "domestic-E06000001-Hartlepool":'Mount Oswald Nursing Home, 16 Hutton Avenue TS26 9PN'
# appearing_UPRNs <- duplicated_geo_location_all_EPCs[tmp_str_dup == T, .(str_concat,n_UPRN,INSPECTION_DATE)]
# appearing_UPRNs[, appearing_UPRN := ifelse(sum(is.na(n_UPRN)) == length(str_concat), T, F), by = str_concat]
# length(unique(appearing_UPRNs[appearing_UPRN==T,]$str_concat)) #3 371
##CASE 2: identical string address repeats with different UPRN values
##example: "domestic-E06000001-Hartlepool":"Gospel Hall, 32 Town Wall TS24 0JQ"
##resolution: assume the most recent UPRN to be the right one #possible extension here for string comparison with OS
# invalid_UPRNs <- duplicated_geo_location_all_EPCs[!is.na(n_UPRN), .(str_concat,n_UPRN,UPRN,ubdc_UPRN,INSPECTION_DATE)]
# invalid_UPRNs <- invalid_UPRNs[, nUnique := length(unique(n_UPRN)), by = str_concat][nUnique != 1, ]
# invalid_UPRNs[ , UPRN_clash:= ifelse(ubdc_UPRN == UPRN, F , T), ]
# fst::write.fst(invalid_UPRNs, "../Data/appendix_invalid_UPRNs.fst")
# write.csv(invalid_UPRNs, '../_Report/appendix_invalid_UPRNs.csv')
# invalid_UPRNs[!is.na(ubdc_UPRN),][!is.na(UPRN) | !UPRN == "", DLUHC_priority := ifelse( UPRN != ubdc_UPRN, T, NA), ]
# length(invalid_UPRNs[DLUHC_priority == T,]$n_UPRN)#1 382
# length(unique(invalid_UPRNs[DLUHC_priority == T,]$n_UPRN))#1 259
# View(invalid_UPRNs[!UPRN == "",][DLUHC_priority == T,])
# lengths(invalid_UPRNs[!UPRN == "",][DLUHC_priority == T,])[1]#677
#Assigning UPRNs to duplicated entries based on dictionary
dict <- duplicated_geo_location_all_EPCs[ !is.na(n_UPRN)  , .(str_concat,n_UPRN,INSPECTION_DATE)]
dict <-  dict[order(-INSPECTION_DATE), .(str_concat,n_UPRN)]
dict <-  dict[!duplicated(str_concat), ]
dict <- setkey(dict, str_concat)
# use the new dictionary to fill in missing UPRNs --- CHECK LOGIC HERE
duplicated_geo_location_all_EPCs[is.na(n_UPRN), n_UPRN := dict[str_concat, n_UPRN]]
setorder(duplicated_geo_location_all_EPCs, n_UPRN, str_concat, -INSPECTION_DATE)
#make grouping variable as: ideally the repeating UPRN, if not the address
duplicated_geo_location_all_EPCs[, n_GRP:= ifelse(is.na(n_UPRN), str_concat, n_UPRN)]
#View(duplicated_geo_location_all_EPCs[, c('n_GRP','str_concat','n_UPRN','INSPECTION_DATE')])
#Output: Append to long list
longitudinalEPCs_long <- duplicated_geo_location_all_EPCs
str(longitudinalEPCs_long )
length(unique(longitudinalEPCs_long$n_GRP))
sum(is.duplicated(longitudinalEPCs_long[, .(-INSPECTION_DATE)]))
str(longitudinalEPCs_long[, .(-INSPECTION_DATE)])
str(longitudinalEPCs_long[, -.(INSPECTION_DATE)])
str(longitudinalEPCs_long[,, -.(INSPECTION_DATE)])
str(longitudinalEPCs_long[,, .(-INSPECTION_DATE)])
str(longitudinalEPCs_long[-(INSPECTION_DATE),,])
str(longitudinalEPCs_long[-INSPECTION_DATE),,])
str(longitudinalEPCs_long[,.SD, .SDcols = !INSPECTION_DATE])
)
str(longitudinalEPCs_long[,.SD, .SDcols = !INSPECTION_DATE])
fst::write.fst(longitudinalEPCs_long, "../Data/longitudinalEPCs_long_9M569050.fst")
####FST WRITE HERE:##ffst::write.fst(longitudinalEPCs_long, "../Data/longitudinalEPCs_long_9M569050.fst")
test <- as.data.table(fst::read.fst("../Data/longitudinalEPCs_long.fst")
####FST WRITE HERE:##ffst::write.fst(longitudinalEPCs_long, "../Data/longitudinalEPCs_long_9M569050.fst")
test <- as.data.table(fst::read.fst("../Data/longitudinalEPCs_long.fst"))
####FST WRITE HERE:##ffst::write.fst(longitudinalEPCs_long, "../Data/longitudinalEPCs_long_9M569050.fst")
test <- as.data.table(fst::read.fst("../Data/longitudinalEPCs_long.fst"))
####FST WRITE HERE:##ffst::write.fst(longitudinalEPCs_long, "../Data/longitudinalEPCs_long_9M569050.fst")
test[, INSPECTION_DATE:=NULL,]
####FST WRITE HERE:##ffst::write.fst(longitudinalEPCs_long, "../Data/longitudinalEPCs_long_9M569050.fst")
test[, INSPECTION_DATE:=NULL,]
setdiff(colnames(longitudinalEPCs_long), colnames(test))
test[, LMK_KEY:=NULL,]
a <- duplicated(test)
str(a)
sum(a)
length(unique(test[a,]$n_GRP))
